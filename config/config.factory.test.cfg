; This is the test factory configuration.

Acquia.Wip.IncludeFileInterface => Acquia\Wip\Implementation\BasicIncludeFile

; this is a comment

Acquia.Wip.StateTableParser => Acquia\Wip\Iterators\BasicIterator\BasicStateTableParser ; We should never need this one.

; another comment

acquia.wip.iterator => Acquia\Wip\Iterators\BasicIterator\StateTableIterator

acquia.wip.ssh.client => \Acquia\Wip\Ssh\Ssh

acquia.wip.phpunit.testobject => Acquia\Wip\Test\PublicStable\Resource\TestObject

$acquia.wip.test.teststring => TEST STRING

; Now, what I'm hoping is that it's ok to use a relative path in tests, and then
; use an absolute path for the actual key.
$acquia.wip.service.private_key_path => tests/Acquia/Wip/Test/PrivateStable/Runtime/Resource/testKey
$acquia.wip.service.username => testuser

acquia.wip.threadpool => \Acquia\Wip\Runtime\ThreadPool singleton
acquia.wip.lock.global => \Acquia\WipIntegrations\DoctrineORM\MySqlLock singleton

acquia.wip.storage.wip => \Acquia\WipIntegrations\DoctrineORM\WipStore singleton
acquia.wip.storage.module => \Acquia\WipIntegrations\DoctrineORM\WipModuleStore singleton
acquia.wip.storage.module_task => \Acquia\WipIntegrations\DoctrineORM\WipModuleTaskStore singleton
acquia.wip.storage.thread => \Acquia\WipIntegrations\DoctrineORM\ThreadStore singleton
acquia.wip.storage.server => \Acquia\WipIntegrations\DoctrineORM\ServerStore singleton
acquia.wip.storage.state => \Acquia\WipIntegrations\DoctrineORM\StateStore singleton
acquia.wip.storage.configuration => \Acquia\WipIntegrations\DoctrineORM\ConfigurationStore singleton
acquia.wip.storage.signal => \Acquia\WipIntegrations\DoctrineORM\SignalStore singleton
acquia.wip.storage.task_definition => \Acquia\WipIntegrations\DoctrineORM\TaskDefinitionStore singleton
acquia.wip.lock.rowlock => \Acquia\WipIntegrations\DoctrineORM\MySqlLock singleton
acquia.wip.lock.rowlock.wippool => \Acquia\Wip\Lock\NullRowLock
; A singleton is rarely a good option for unit testing.
acquia.wip.storage.wippool => \Acquia\WipIntegrations\DoctrineORM\WipPoolStore singleton
; acquia.wip.storage.wippool => \Acquia\WipIntegrations\DoctrineORM\WipPoolStore
acquia.wip.storage.ecs_cluster => \Acquia\WipIntegrations\DoctrineORM\EcsClusterStore singleton
acquia.wip.pool => \Acquia\Wip\Runtime\WipPool
acquia.wip.wiplog => \Acquia\Wip\Implementation\WipLog
; acquia.wip.wiplogstore => \Acquia\Wip\Implementation\SqliteWipLogStore singleton
acquia.wip.wiplogstore => \Acquia\WipIntegrations\DoctrineORM\WipFlushingContainerLogStore
acquia.wip.api => \Acquia\Wip\Implementation\WipTaskApi
acquia.wip.ssh => \Acquia\Wip\Implementation\SshApi
acquia.wip.ssh_service => \Acquia\Wip\Ssh\SshService
acquia.wip.ssh_service.local => \Acquia\Wip\Ssh\LocalExecSshService
acquia.wip.acquiacloud => \Acquia\Wip\Implementation\AcquiaCloudApi
acquia.wip.acquiacloud.api => Acquia\Wip\AcquiaCloud\AcquiaCloud
acquia.wip.application => \Acquia\Wip\Runtime\WipApplication
acquia.wip.handler.signal => \Acquia\WipService\Utility\SignalCallbackHttpTransport singleton
acquia.wip.handler.containers => \Acquia\Wip\Container\NullContainer
acquia.wip.containers => \Acquia\Wip\Implementation\ContainerApi
acquia.wip.dataentrystore => \Acquia\Wip\Implementation\SqliteDataEntryStore
acquia.wip.notification => \Acquia\WipService\Notification\BugsnagNotifier
acquia.wip.signal.signalfactory => \Acquia\Wip\Signal\SignalFactory
acquia.wip.uri.authentication => \Acquia\WipIntegrations\Security\BasicAuthentication
acquia.wip.metrics.relay => \Acquia\WipService\Metrics\HostedGraphiteMetricsRelay singleton
acquia.wip.state_controller => \Acquia\WipService\Runtime\StateController
acquia.wip.pool.controller => \Acquia\Wip\Runtime\WipPoolController singleton
acquia.wipservice.mysql.utility => \Acquia\WipService\MySql\UtilityOverride singleton

$acquia.wip.worker.wait.max => 2
$acquia.wip.signal.wip.complete => \Acquia\Wip\Signal\WipCompleteSignal
$acquia.wip.signal.ssh.complete => \Acquia\Wip\Signal\SshCompleteSignal
$acquia.wip.signal.container.complete => \Acquia\Wip\Signal\ContainerCompleteSignal
$acquia.wip.signal.acquiacloud.complete => \Acquia\Wip\Signal\AcquiaCloudCompleteSignal
acquia.wip.signal.cleanup => \Acquia\Wip\Signal\CleanupSignal
$acquia.wip.ssl.verifyCertificate => false

; Used by the Cloud API integration to indicate the maximum number of retries
; that should be attempted when a server error occurs during a Cloud API call.
$acquia.wip.acquiacloud.retrycount => 3
$acquia.wip.acquiacloud.retrycodes => [403, 404, 500, 502, 503, 504]

; Used by the runtime statistics functionality to provide a bit of slack for the
; maximum calculated runtime in case systems are overloaded.  This value represents
; the number of seconds to add to the calculated maximum runtime.
$acquia.wip.runtime.maxoffset => 300

; Used by the runtime statistics functionality to override maximum process times
; for particular tasks.  Some tasks have a runtime that depends on the size of a
; database or the number or size of files, so driving maximum run times by
; statistics alone will cause some tasks to fail out erroneously.
; Note this is a comma-separated list of values.
; $acquia.wip.runtime.omittasks =>

; Not very useful in tests, but needs to be set to avoid fatals
$acquia.wip.exec.path => bin/wipctl exec

; Path to the thread pool process's pidfile, used as a mutex lock for processing the thread pool.
$acquia.wip.thread.daemon.pidfile => /tmp/wipthreadpool.pid

; threshold for number of "missed threads" should count as a warning.
$acquia.wip.threadpool.threshold => 50

; Default to executing WIP tasks on servers over SSH (Set this to "local" in
; order to execute WIP tasks locally.  Containers will default to "local".
$acquia.wip.worker_exec_method => ssh

; Sets the variables used by the flushing log store: REST endpoint for POST
; calls; buffer size and log level to trigger flushes; and max number of logs
; per request. Log levels must be valid in WipLogLevel- severity is inversely
; related to the corresponding int value.
$acquia.wip.wipflushinglogstore.endpoint => https://wip-service.local/logs
$acquia.wip.wipflushinglogstore.buffer_size => 20
$acquia.wip.wipflushinglogstore.log_level => 2
$acquia.wip.wipflushinglogstore.max_buffer_size => 40

$acquia.wip.task.run_in_container => false

; Indicates that we do not want to log cromwell messages.
$acquia.log_cromwell => false

; Whether ThreadPoolProcessDetail should be logging.
$acquia.wip.process.details.logging => TRUE
; Whether the logging should be verbose.
$acquia.wip.process.details.verbose => TRUE
