////
/// Mixins for implementing vertical rhythm
///
/// @group core
////

/// Add baseline rhythm styles to an element.
///
/// @param {Number (px)} $size [$text-size-root]
///   The base font size in pixels that is used to generate vertical rhythm.
/// @param {String} $typeface [$typeface-default]
///   The typeface name to be used in the generation of vertical rhythm.
/// @param {String} $webfont [null]
///   The webfont name to be used in the generation of vertical rhythm. (This
///   argument is currently deprecated.)
/// @param {Number (unitless)} $scale [$rhythm-scale-base]
///   A scale to be used when determining vertical rhythm.
/// @param {Number (unitless)} $above [0]
///   How many vertical additional units of space to place above the element in
///   the form of padding.
/// @param {Number (unitless)} $below [1]
///   How many vertical units of space to place below the element in the form of
///   margin.
/// @param {Boolean} $negative-margin [true]
///  By default, a negative margin is possible when `$below` is 0. If this is
///  changed to false, the bottom margin will be changed to the remainder of a
///  `$rhythm-unit`.
/// @param {Boolean} $force-typeface [false]
///  Output the `font-family` styles even if `$global-typographic-baseline-set`
///  is `true` or the typeface matches `$typeface-default`.
/// @param {Boolean} $force-rhythm [false]
///  Output `line-height` and `font-size` styles even if
///  `$global-typographic-baseline-set` is `true` or the `$size` equals
///  `$text-size-root`.
@mixin set-baseline(
  $size: $text-size-root,
  $typeface: $typeface-default,
  $webfont: null,
  $scale: $rhythm-scale-base,
  $above: 0,
  $below: 1,
  $negative-margin: true,
  $force-typeface: false,
  $force-rhythm: false
) {

  @if $webfont != null and $webfont != $typeface and map-has-key($typefaces, $webfont) {
    @warn 'The $webfont argument for the set-baseline() mixin has been deprecated in favor of the fallback option in the typeface definition.';
    $typeface: $webfont;
  }

  $type: map-get($typefaces, $typeface);
  $cap-height: map-get($type, cap-height);

  @if type-of($size) == px {
    $size: px-to-relative($size);
  }

  $unit: rhythm-unit($size, $scale: $scale);
  $rhythm-line-height: rhythm-line-height($size);
  $top: rhythm-top($size, $type: $type, $above: $above);
  $bottom: rhythm-bottom($size, $type: $type, $below: $below, $negative-margin: $negative-margin);

  @include set-font-family($typeface, $force-typeface);

  @if $global-typographic-baseline-set == false or $size != $text-size-root or $force-rhythm {
    font-size: px-to-relative($size);
    line-height: $rhythm-line-height;
  }

  margin-top: 0;
  padding-top: $top;
  margin-bottom: $bottom;

}

/// Keep elements with a visual outer styling in sync with rhythm.
///
/// @param {Number (unitless)} $unit [1]
///   The number of rhythm units of padding to assign.
/// @param {Number (rem)} $top-adjust [0]
///   Adjust the top padding to compensate for other styles that add dimension.
/// @param {Number (rem)} $bottom-adjust [0]
///   Adjust the bottom margin to compensate for other styles that add
///   dimension.
@mixin set-visual-wrapper(
  $units: 1,
  $top-adjust: 0,
  $bottom-adjust: 0,
  $is-inline: false
) {

  @if $is-inline {
    padding-bottom: rem-whole-pixel($spacing-bottom + $rhythm-unit * ($units - 1) - $bottom-adjust);
  } @else {
    margin-bottom: rem-whole-pixel($spacing-bottom - $bottom-adjust);
  }

  padding-top: rem-whole-pixel($spacing-top + $units * $rhythm-unit - $top-adjust);

}

/// Set a font family and its fallback.
///
/// @param {String} $typeface [$typeface-default]
///  The key of a typeface definition.
/// @param {Boolean} $force [false]
///  If `true`, the `font-family` styles will be output if
///  `$global-typographic-baseline-set` is `true` or `$typeface` equals
///  `$typeface-default`.
@mixin set-font-family($typeface: $typeface-default, $force: false) {

  @if $global-typographic-baseline-set == false or $typeface != $typeface-default or $force {

    $definition: get-typeface($typeface);

    @if map-has-key($definition, fallback) {
      $selector: #{&};

      @include set-font-family(map-get($definition, fallback));

      @if $selector == '%baseline-document-typography' or $selector == html {
        @at-root {
          .wf-active {
            font-family: get-typeface($typeface, font-family);
          }
        }
      } @else {
        .wf-active & {
          font-family: get-typeface($typeface, font-family);
        }
      }
    } @else {
      font-family: get-typeface($typeface, font-family);
    }
  }

}
