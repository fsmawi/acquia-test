////
/// Responsive helpers
///
/// @group core
////

/// Responsive Media Queries
///
/// @content Selectors and properties to be used in the rendered media query.
///
/// @example scss - Respond mixin
///   media("screen", "less-than-small") {
///     @content
///   }
///
/// @param {String} $args - string(s) that correspond to a preset value.
@mixin media-query($args...) {
  $query: '';
  @each $arg in $args {
    $op: '';
    @if ($query != '') {
      $op: ' and ';
    }
    $query: $query + $op + responsive-media-condition-translate($arg);
  }
  @media #{$query}  {
    @content;
  }
}

/// Responsive Element-based Media Queries
///
/// @content Selectors and properties to be used in the rendered media query.
///
/// @example scss - Element Query mixin
///   .selector {
///     @include element-query(min, width, px-to-relative(420px)) {
///       .sub-selector {
///         @content
///       }
///     }
///   }
///
/// @example css - Element Query mixin
///   .selector[{min,max}-{width,height}~="[int]{px,rm,rem}"] {
///     @content
///   }
///
/// @param {String} $threshold
///   A single string that is equal to "min" or "max".
/// @param {String} $direction
///   A single string that is equal to "width" or "height".
/// @param {integer} $value
///   An integer that corresponds to a linear size value where the "breakpoint"
///   should activate.
@mixin element-query($threshold, $direction, $value) {
  // Explain that the developer needs to also include the necessary library files.
  @if (map-has-key($cli-warning-sent, element-query) == false) or (map-get($cli-warning-sent, element-query) == false) {
    @warn '\a ★ ★ ★  Congratulations! You\'re implementing experimental code! However, in order for these Element-based Media Queries to function you need to also download the corresponding library, `npm i css-element-queries` and include the two necessary scripts in the footer of the page.\a'
    + '–––––> See https://github.com/marcj/css-element-queries\a';

    $cli-warning-sent: map-merge($cli-warning-sent, (element-query: true)) !global;
  }

  // Throw error if the $threshold is not a supported value.
  @if ($threshold != 'min') and ($threshold != 'max') {
    @error "Invalid threshold string, '#{$threshold}'. Allowed values are 'min' and 'max'.";
  }

  // Throw error if the $direction is not a supported value.
  @if ($direction != 'width') and ($direction != 'height') {
    @error "Invalid direction string, '#{$direction}'. Allowed values are 'width' and 'height'.";
  }

  $value-type: type-of($value);

  // Throw error if the $value is a string instead of a number.
  @if $value-type == string {
    @error "Invalid numerical value, '#{$value}'. Please use an integer with a unit ('px', 'em', or 'rem'). If the value provided is a number, remove the quotes that encapsulate it so that it isn't processed as a string.";
  } @else if $value-type == number {
    $value-unit: unit($value);

    // Warn the developer that because a unit of measure was not specified pixels will be used by default.
    @if $value-unit == "" {
      $computed-value: px-to-relative($value);
      @warn "Unit of measure not provided with number for $value, '#{$value}'. Assuming 'pixel' units were intended, and outputting the #{$value} in relative units, #{$computed-value}.";
      $value: $computed-value;
    } @else if $value-unit == "px" {
      $computed-value: px-to-relative($value);
      $value: $computed-value;
    } @else if $value-unit == "%" {
      @error "The provided $value's unit, '#{$value}', is a percentage which is not supported. Please use 'px' or a relative unit instead."
    }
  }

  &[#{$threshold}-#{$direction}~="#{$value}"] {
    @content
  }
}
