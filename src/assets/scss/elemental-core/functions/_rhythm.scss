////
/// Rhythm functions
///
/// @group core
////

/// Determine the distance from the baseline to the bottom of the line-height.
///
/// @param {Number (px)} $font-size [$text-size-root]
///   The base font size to calculate from.
/// @param {Number (unitless)} $rhythm-line-height [rhythm-line-height($font-size)]
///   A number calculated by rhythm-line-height.
/// @param {Number (unitless)} $cap-height
///   A factor to tell how much of a font's size is consumed by a capital
///   letter.
///
/// @return {Number (unitless)}
@function baseline-distance(
  $font-size: $text-size-root,
  $rhythm-line-height: rhythm-line-height($font-size),
  $type: $type-default
) {

  $cap-height: map-get($type, cap-height);

  @return ($rhythm-line-height - $cap-height) / 2;

}

/// Calculate a rhythm unit: the base unit for determining vertical rhythm.
///
/// @param {Number (px)} $font-size [$text-size-root]
/// @param {Number (unitless)} $scale [$rhythm-scale-base]
///
/// @return {Number (px)}
@function rhythm-unit($font-size: $text-size-root, $scale: $rhythm-scale-base) {

  @return $line-height-base * $font-size / $scale;

}

/// Calculate the number of rhythm units that can fit the font-size.
///
/// @param {Number (px)} $font-size [$text-size-root]
/// @param {Number (px)} $unit [rhythm-unit()]
///
/// @return {Number (unitless)}
@function rhythm-lines($font-size: $text-size-root, $unit: rhythm-unit()) {

  @return ceil($font-size / $unit);

}

/// Calculate the new line-height.
///
/// @param {Number (px)} $font-size [$text-size-root]
/// @param {Number (unitless)} $lines [rhythm-lines($font-size)]
/// @param {Number (px)} $unit [rhythm-unit()]
///
/// @return {Number (unitless)}
@function rhythm-line-height(
  $font-size: $text-size-root,
  $lines: rhythm-lines($font-size),
  $unit: rhythm-unit()
) {

  @return (($unit * $lines) / ($line-height-base * $text-size-root) * $line-height-base / ($font-size / $text-size-root));

}

/// Calculate the top padding of an element.
///
/// @param {Number (px)} $font-size [$text-size-root]
/// @param {Map} $type [$type-default]
/// @param {Number (unitless)} $baseline-distance [baseline-distance()]
/// @param {Number (unitless)} $above [0]
///
/// @return {Number (rem)}
@function rhythm-top(
  $font-size: $text-size-root,
  $type: $type-default,
  $line-height: rhythm-line-height(),
  $above: 0
) {

  $baseline-distance: baseline-distance($font-size, $type: $type);

  @return rem-whole-pixel(($baseline-distance * 1rem) + ($rhythm-unit * $above));

}

/// Calculate the bottom margin of an element.
///
/// @param {Number (px)} $font-size [$text-size-root]
/// @param {Number (unitless)} $line-height [rhythm-line-height()]
/// @param {Number (unitless)} $baseline-distance [baseline-distance()]
/// @param {Number (unitless)} $below [1]
/// @param {Boolean} $negative-margin [true]
///
/// @return {Number (rem)}
@function rhythm-bottom(
  $font-size: $text-size-root,
  $line-height: rhythm-line-height(),
  $type: $type-default,
  $below: 1,
  $negative-margin: true
) {

  $baseline-distance: baseline-distance($font-size, $type: $type);
  $bottom: (($line-height * $below) - $baseline-distance) * 1rem;

  @if ($negative-margin == false) and ($bottom < 0) {
    @return rem-whole-pixel($rhythm-unit + $bottom);
  } @else {
    @return rem-whole-pixel($bottom);
  }

}

/// Calculate the height for a specific font size and number of lines.
///
/// @param {Number (px)} $font-size [$text-size-root]
/// @param {Number (integer)} $lines [1]
///
/// @return {Number (px)}
@function rhythm-height($font-size: $text-size-root, $lines: 1) {

  @return rem-whole-pixel((px-to-relative($font-size) * rhythm-line-height($font-size) * $lines) + rhythm-top($font-size) + rhythm-bottom($font-size));

}
