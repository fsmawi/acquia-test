; This is the test factory configuration.

Acquia.Wip.IncludeFileInterface => Acquia\Wip\Implementation\BasicIncludeFile

; this is a comment

Acquia.Wip.StateTableParser => Acquia\Wip\Iterators\BasicIterator\BasicStateTableParser ; We should never need this one.

; another comment

acquia.wip.iterator => Acquia\Wip\Iterators\BasicIterator\StateTableIterator

acquia.wip.ssh.client => \Acquia\Wip\Ssh\Ssh

acquia.wip.phpunit.testobject => Acquia\Wip\Test\PublicStable\Resource\TestObject

acquia.wip.phpunit.interdependenta => Acquia\Wip\Test\PublicStable\Resource\InterdependentA
acquia.wip.phpunit.interdependentb => Acquia\Wip\Test\PublicStable\Resource\InterdependentB

$acquia.wip.test.teststring => TEST STRING

; Now, what I'm hoping is that it's ok to use a relative path in tests, and then
; use an absolute path for the actual key.
$acquia.wip.service.private_key_path => tests-wipng/unit/Acquia/Wip/Test/PrivateStable/Runtime/Resource/testKey
$acquia.wip.service.username => testuser

acquia.wip.lock.rowlock => \Acquia\Wip\NullLock singleton
acquia.wip.lock.rowlock.wippool => \Acquia\Wip\Lock\NullRowLock
acquia.wip.storage.wip => Acquia\Wip\Storage\BasicWipStore singleton
acquia.wip.storage.module => \Acquia\Wip\Storage\BasicWipModuleStore singleton
acquia.wip.storage.module_task => \Acquia\Wip\Storage\BasicWipModuleTaskStore singleton
acquia.wip.storage.thread => \Acquia\Wip\Storage\BasicThreadStore singleton
acquia.wip.storage.server => \Acquia\Wip\Storage\BasicServerStore singleton
acquia.wip.storage.state => \Acquia\Wip\Storage\BasicStateStore singleton
acquia.wip.storage.wippool => \Acquia\Wip\Storage\BasicWipPoolStore singleton
acquia.wip.storage.wipapplication => \Acquia\Wip\Storage\BasicWipApplicationStore singleton
acquia.wip.storage.configuration => \Acquia\Wip\Storage\BasicConfigurationStore singleton
acquia.wip.storage.signal => \Acquia\Wip\Implementation\SqliteSignalStore
acquia.wip.pool => \Acquia\Wip\Runtime\WipPool
acquia.wip.wiplog => \Acquia\Wip\Implementation\WipLog
acquia.wip.wiplogstore => \Acquia\Wip\Implementation\SqliteWipLogStore
acquia.wip.api => \Acquia\Wip\Implementation\WipTaskApi
acquia.wip.ssh => \Acquia\Wip\Implementation\SshApi
acquia.wip.ssh_service => \Acquia\Wip\Ssh\SshService
acquia.wip.ssh_service.local => \Acquia\Wip\Ssh\LocalExecSshService
acquia.wip.acquiacloud => \Acquia\Wip\Implementation\AcquiaCloudApi
acquia.wip.acquiacloud.api => Acquia\Wip\AcquiaCloud\AcquiaCloud
acquia.wip.application => \Acquia\Wip\Runtime\WipApplication
acquia.wip.handler.signal => \Acquia\Wip\Signal\TestCallbackHttpTransport singleton
acquia.wip.handler.containers => \Acquia\Wip\Container\NullContainer
acquia.wip.containers => \Acquia\Wip\Implementation\ContainerApi
acquia.wip.dataentrystore => \Acquia\Wip\Implementation\SqliteDataEntryStore
acquia.wip.notification => \Acquia\Wip\Implementation\NullNotifier
acquia.wip.metrics.relay => \Acquia\Wip\Implementation\NullMetricsRelay singleton
acquia.wip.pool.controller => \Acquia\Wip\Runtime\WipPoolController singleton
acquia.wip.lock.global => \Acquia\Wip\NullLock singleton
acquia.wip.storage.task_definition => \Acquia\WipIntegrations\DoctrineORM\TaskDefinitionStore singleton
acquia.wip.storage.ecs_cluster => \Acquia\WipIntegrations\DoctrineORM\EcsClusterStore singleton
acquia.wip.signal.signalfactory => \Acquia\Wip\Signal\SignalFactory

$acquia.wip.worker.wait.max => 2
$acquia.wip.signal.wip.complete => \Acquia\Wip\Signal\WipCompleteSignal
$acquia.wip.signal.ssh.complete => \Acquia\Wip\Signal\SshCompleteSignal
$acquia.wip.signal.container.complete => \Acquia\Wip\Signal\ContainerCompleteSignal
$acquia.wip.signal.acquiacloud.complete => \Acquia\Wip\Signal\AcquiaCloudCompleteSignal
acquia.wip.signal.cleanup => \Acquia\Wip\Signal\CleanupSignal
$acquia.wip.ssl.verifyCertificate => false

; Used by the Cloud API integration to indicate the maximum number of retries
; that should be attempted when a server error occurs during a Cloud API call.
$acquia.wip.acquiacloud.retrycount => 3
$acquia.wip.acquiacloud.retrycodes => [403, 404, 500, 502, 503, 504]

; Used by the runtime statistics functionality to provide a bit of slack for the
; maximum calculated runtime in case systems are overloaded.  This value represents
; the number of seconds to add to the calculated maximum runtime.
$acquia.wip.runtime.maxoffset => 300

; Used by the runtime statistics functionality to override maximum process times
; for particular tasks.  Some tasks have a runtime that depends on the size of a
; database or the number or size of files, so driving maximum run times by
; statistics alone will cause some tasks to fail out erroneously.
; Note this is a comma-separated list of values.
; $acquia.wip.runtime.omittasks =>

; Not very useful in tests, but needs to be set to avoid fatals
$acquia.wip.exec.path => bin/wipctl exec

; threshold for number of "missed threads" should count as a warning.
$acquia.wip.threadpool.threshold => 50

; Set this to "local" in order to execute WIP tasks locally.
$acquia.wip.worker_exec_method => ssh

; Add the following overrides to an override file in
; ~/.wip-service/config/config.factory.cfg if running on a Mac with
; GNU-compatible utilities installed with a 'g' prefix (the default when
; installed with homebrew `brew install coreutils`).
; $acquia.wip.ssh.commands.stat => \gstat
; $acquia.wip.ssh.commands.md5sum => \gmd5sum
; $acquia.wip.ssh.commands.cut => \gcut
; $acquia.wip.ssh.commands.echo => \gecho
; $acquia.wip.ssh.commands.base64 => \gbase64

; Set the temporary directory used by the ssh_wrapper script.
; $acquia.wip.ssh.tempdir => /tmp

; If provided, the following public key will be added to the container to
; facilitate SSH access. This feature must only be used for development.
; $acquia.wip.container.dev_public_key_file => <public key path>

; This property controls whether or not the build tool within the container
; will be updated during the build process. The default is TRUE.
; $acquia.wip.container.update_build_tool = FALSE

; This property controls whether the container is released when the Wip object
; exits. Turning this to FALSE can be helpful during development because the
; containers do not run for more than a few minutes. For production deployments
; this value must always be TRUE.
; $acquia.container.release_on_exit = FALSE

; This property controls whether the container is terminated when the Wip object
; exits. Turning this to TRUE will prevent any cleanup that normally happens
; when the container exits gracefully.
; $acquia.container.terminate_on_exit = FALSE
