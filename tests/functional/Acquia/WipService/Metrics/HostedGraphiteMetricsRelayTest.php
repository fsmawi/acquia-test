<?php

namespace Acquia\WipService\Metrics;

/**
 * Missing summary.
 */
class HostedGraphiteMetricsRelayTest extends \PHPUnit_Framework_TestCase {

  /**
   * Gets a metrics relay that can be used for testing.
   *
   * @param array $config
   *   The relay configuration.
   *
   * @return HostedGraphiteMetricsRelay
   *   The metrics relay.
   */
  private function getRelay($config) {
    return new HostedGraphiteMetricsRelay($config);
  }

  /**
   * Gets configuration for a testing relay.
   *
   * @return array
   *   The configuration array.
   */
  private function getRelayConfig() {
    return array(
      'api_key' => 'unknown',
      'namespace' => 'test',
      'enabled' => FALSE,
      'machine_namespace' => FALSE,
    );
  }

  /**
   * Provides expected and actual messages to test the relay.
   *
   * Creates a number of datapoints and aligns them with expected messages
   * generated by the metrics relay to be verified by testMessages().
   */
  public function messagesProvider() {
    $config = $this->getRelayConfig();
    $relay = $this->getRelay($config);
    $connection = $relay->getConnection();
    $namespace = 'metric.test';
    $hostname = 'service.mock_host';

    $relay->increment($namespace);
    $relay->decrement($namespace);
    $relay->count($namespace, 5);
    $relay->count($namespace, 10);
    $relay->timing($namespace, 100);
    $relay->timing($namespace, 500);
    $relay->gauge($namespace, 125);
    $relay->gauge($namespace, 126);
    $relay->set($namespace, 1);
    $relay->set($namespace, 2);

    $messages = $connection->getMessages();
    $name = sprintf('%s.%s.%s.%s', $config['api_key'], $config['namespace'], $hostname, $namespace);
    $data = array(
      array(current($messages), $name . ':1|c'),
      array(next($messages), $name . ':-1|c'),
      array(next($messages), $name . ':5|c'),
      array(next($messages), $name . ':10|c'),
      array(next($messages), $name . ':100|ms'),
      array(next($messages), $name . ':500|ms'),
      array(next($messages), $name . ':125|g'),
      array(next($messages), $name . ':126|g'),
      array(next($messages), $name . ':1|s'),
      array(next($messages), $name . ':2|s'),
    );
    $connection->clear();
    return $data;
  }

  /**
   * Tests that the messages generated by the relay are accurate.
   *
   * @param string $message
   *   The message produced by the metrics relay.
   * @param string $expected
   *   The expected message from the relay call.
   *
   * @dataProvider messagesProvider
   */
  public function testMessages($message, $expected) {
    $this->assertEquals($expected, $message);
  }

  /**
   * Ensure that runtime collectors (timing and memory) produce messages.
   */
  public function testRuntimeCollection() {
    $config = $this->getRelayConfig();
    $relay = $this->getRelay($config);
    $connection = $relay->getConnection();
    $namespace = 'metric.test';
    $hostname = 'service.mock_host';

    $relay->startTiming($namespace);
    $relay->endTiming($namespace);

    $relay->startMemoryProfile($namespace);
    $relay->endMemoryProfile($namespace);

    $messages = $connection->getMessages();
    $connection->clear();

    $name = sprintf('%s.%s.%s.%s', $config['api_key'], $config['namespace'], $hostname, $namespace);
    $this->assertRegExp('/^' . $name . '.*\|ms$/', current($messages));
    $this->assertRegExp('/^' . $name . '.*\|c$/', next($messages));
  }

  /**
   * Tests the getNamespace method.
   */
  public function testGetNamespace() {
    $config = $this->getRelayConfig();
    $relay = $this->getRelay($config);
    $namespace = $relay->getNamespace();
    $this->assertEquals($namespace, 'unknown.test.service.mock_host');
  }

}
